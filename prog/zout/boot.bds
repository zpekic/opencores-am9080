binary-debuggable-source
0000 0000 f boot.asm
0000 0000 s ;--------------------------------------------------------------------------
0000 0000 s ; Simple test program for Sys9080 project https://github.com/zpekic/sys9080
0000 0000 s ; 		(c) zpekic@hotmail.com - 2017, 2018
0000 0000 s ;--------------------------------------------------------------------------
0000 0000 s ACIA0_STATUS	EQU 0x10; status read-only
0000 0000 s ACIA0_DATA	EQU 0x11; data send/receive
0000 0000 s ACIA1_STATUS	EQU 0x12; status read-only
0000 0000 s ACIA1_DATA	EQU 0x13; data send/receive
0000 0000 s PORT_0		EQU 0x00;
0000 0000 s PORT_1		EQU 0x01;
0000 0000 s MASK_VALID	EQU 0x01; fields in UART status register
0000 0000 s MASK_READY	EQU 0x02;
0000 0000 s MASK_ERROR	EQU 0x40;
0000 0000 s MASK_INTREQ	EQU 0x80;
0000 0000 s CR		EQU 0x0D; ASCII newline
0000 0000 s LF		EQU 0x0A; ASCII line feed
0000 0000 s MASK_BUTTON1	EQU 0x02;
0000 0000 s Temp_PC		EQU 0xFF00; can't use DW because the hex file maps to ROM only
0000 0000 s AltMon		EQU 0x0400; Altmon is org'd to this location
0000 0000 s 
0000 0000 s 
0000 0000 s 		ORG 0x0000	;-----RST0 == RESET
0000 0000 d f3
0000 0000 s 		DI
0001 0001 d c3ed00
0001 0001 s 		JMP Boot
0004 0004 s 
0008 0008 s 		ORG 0x0008	;-----RST1 (not used)
0008 0008 d f3
0008 0008 s 		DI
0009 0009 d c33900
0009 0009 s 		JMP DumpState
000c 000c s 
0010 0010 s 		ORG 0x0010	;-----RST2 (not used)
0010 0010 d f3
0010 0010 s 		DI
0011 0011 d c33900
0011 0011 s 		JMP DumpState
0014 0014 s 
0018 0018 s 		ORG 0x0018	;-----RST3 (not used)
0018 0018 d f3
0018 0018 s 		DI
0019 0019 d c33900
0019 0019 s 		JMP DumpState
001c 001c s 
0020 0020 s 		ORG 0x0020	;-----RST4 (ACIA1)
0020 0020 d f3
0020 0020 s 		DI
0021 0021 d c3ba00
0021 0021 s 		JMP OnByteReceived
0024 0024 s 
0028 0028 s 		ORG 0x0028	;-----RST5 (ACIA0)
0028 0028 d f3
0028 0028 s 		DI
0029 0029 d c3ba00
0029 0029 s 		JMP OnByteReceived
002c 002c s 
0030 0030 s 		ORG 0x0030	;-----RST6 (BTN1)
0030 0030 d fb
0030 0030 s 		EI		;no interrupt servicing (used to control ACIA status)
0031 0031 d c9
0031 0031 s 		RET
0032 0032 s 
0038 0038 s 		ORG 0x0038	;-----RST7 (BTN0)
0038 0038 d f3
0038 0038 s 		DI		
0039 0039 d e3
0039 0039 s DumpState:	XTHL			;PC from stack is now in HL
003a 003a d 2200ff
003a 003a s 		SHLD Temp_PC		;store away (making this code non re-entrant)
003d 003d d e3
003d 003d s 		XTHL			;restore PC to stack
003e 003e d e5
003e 003e s 		PUSH H
003f 003f d d5
003f 003f s 		PUSH D
0040 0040 d c5
0040 0040 s 		PUSH B
0041 0041 d f5
0041 0041 s 		PUSH PSW
0042 0042 s 
0042 0042 d e5
0042 0042 s 		PUSH H
0043 0043 d d5
0043 0043 s 		PUSH D
0044 0044 d c5
0044 0044 s 		PUSH B
0045 0045 d f5
0045 0045 s 		PUSH PSW
0046 0046 s 
0046 0046 d 219901
0046 0046 s 		LXI H, TextAF
0049 0049 d cd3a01
0049 0049 s 		CALL TxStringAtHL
004c 004c d e3
004c 004c s 		XTHL
004d 004d d cd5501
004d 004d s 		CALL TxValueOfHL
0050 0050 d e1
0050 0050 s 		POP H
0051 0051 s 		
0051 0051 d 21a001
0051 0051 s 		LXI H, TextBC
0054 0054 d cd3a01
0054 0054 s 		CALL TxStringAtHL
0057 0057 d e3
0057 0057 s 		XTHL
0058 0058 d cd5501
0058 0058 s 		CALL TxValueOfHL
005b 005b d cd4401
005b 005b s 		CALL BytesAtHL
005e 005e d e1
005e 005e s 		POP H
005f 005f s 
005f 005f d 21a701
005f 005f s 		LXI H, TextDE
0062 0062 d cd3a01
0062 0062 s 		CALL TxStringAtHL
0065 0065 d e3
0065 0065 s 		XTHL
0066 0066 d cd5501
0066 0066 s 		CALL TxValueOfHL
0069 0069 d cd4401
0069 0069 s 		CALL BytesAtHL
006c 006c d e1
006c 006c s 		POP H
006d 006d s 
006d 006d d 21ae01
006d 006d s 		LXI H, TextHL
0070 0070 d cd3a01
0070 0070 s 		CALL TxStringAtHL
0073 0073 d e3
0073 0073 s 		XTHL
0074 0074 d cd5501
0074 0074 s 		CALL TxValueOfHL
0077 0077 d cd4401
0077 0077 s 		CALL BytesAtHL
007a 007a d e1
007a 007a s 		POP H
007b 007b s 
007b 007b d 21b501
007b 007b s 		LXI H, TextPC
007e 007e d cd3a01
007e 007e s 		CALL TxStringAtHL
0081 0081 d 2a00ff
0081 0081 s 		LHLD Temp_PC
0084 0084 d cd5501
0084 0084 s 		CALL TxValueOfHL
0087 0087 d cd4401
0087 0087 s 		CALL BytesAtHL
008a 008a s 
008a 008a d 21bc01
008a 008a s 		LXI H, TextSP
008d 008d d cd3a01
008d 008d s 		CALL TxStringAtHL
0090 0090 d 11ffff
0090 0090 s 		LXI D, 0xFFFF		;start searching for stack position from top of memory down
0093 0093 d 2a00ff
0093 0093 s 		LHLD Temp_PC
0096 0096 d eb
0096 0096 s 		XCHG			;HL = 0xFFFF, DE = PC to search for
0097 0097 d 7a
0097 0097 s SearchForPC:	MOV A, D
0098 0098 d be
0098 0098 s 		CMP M
0099 0099 d c2b000
0099 0099 s 		JNZ NotFound
009c 009c d 2b
009c 009c s 		DCX H
009d 009d d 7b
009d 009d s 		MOV A, E
009e 009e d be
009e 009e s 		CMP M
009f 009f d c29700
009f 009f s 		JNZ SearchForPC
00a2 00a2 d cd5501
00a2 00a2 s 		CALL TxValueOfHL
00a5 00a5 d cd4401
00a5 00a5 s 		CALL BytesAtHL
00a8 00a8 d 3e0d
00a8 00a8 s 		MVI A, CR
00aa 00aa d cd7401
00aa 00aa s 		CALL SendChar
00ad 00ad d c3b400
00ad 00ad s 		JMP RestoreRegs
00b0 00b0 d 2b
00b0 00b0 s NotFound:	DCX H
00b1 00b1 d c39700
00b1 00b1 s 		JMP SearchForPC
00b4 00b4 s 
00b4 00b4 d f1
00b4 00b4 s RestoreRegs:	POP PSW
00b5 00b5 d c1
00b5 00b5 s 		POP B
00b6 00b6 d d1
00b6 00b6 s 		POP D
00b7 00b7 d e1
00b7 00b7 s 		POP H
00b8 00b8 d fb
00b8 00b8 s 		EI
00b9 00b9 d c9
00b9 00b9 s 		RET
00ba 00ba s 
00ba 00ba s ;-------------------------------------------
00ba 00ba d f5
00ba 00ba s OnByteReceived:	PUSH PSW
00bb 00bb d db01
00bb 00bb s 		IN PORT_1		;hooked up to 4 push buttons
00bd 00bd d e602
00bd 00bd s 		ANI MASK_BUTTON1
00bf 00bf d caea00
00bf 00bf s 		JZ ProcessByte	
00c2 00c2 d e5
00c2 00c2 s 		PUSH H
00c3 00c3 d d5
00c3 00c3 s 		PUSH D
00c4 00c4 d c5
00c4 00c4 s 		PUSH B
00c5 00c5 s 
00c5 00c5 d db12
00c5 00c5 s 		IN ACIA1_STATUS		
00c7 00c7 d 67
00c7 00c7 s 		MOV H, A
00c8 00c8 d db13
00c8 00c8 s 		IN ACIA1_DATA
00ca 00ca d 6f
00ca 00ca s 		MOV L, A
00cb 00cb d e5
00cb 00cb s 		PUSH H
00cc 00cc s 
00cc 00cc d db10
00cc 00cc s 		IN ACIA0_STATUS		
00ce 00ce d 67
00ce 00ce s 		MOV H, A
00cf 00cf d db11
00cf 00cf s 		IN ACIA0_DATA
00d1 00d1 d 6f
00d1 00d1 s 		MOV L, A
00d2 00d2 d e5
00d2 00d2 s 		PUSH H
00d3 00d3 s 
00d3 00d3 d 213702
00d3 00d3 s 		LXI H, TextACIA0
00d6 00d6 d cd3a01
00d6 00d6 s 		CALL TxStringAtHL
00d9 00d9 d e1
00d9 00d9 s 		POP H
00da 00da d cd5501
00da 00da s 		CALL TxValueOfHL
00dd 00dd s 
00dd 00dd d 215402
00dd 00dd s 		LXI H, TextACIA1
00e0 00e0 d cd3a01
00e0 00e0 s 		CALL TxStringAtHL
00e3 00e3 d e1
00e3 00e3 s 		POP H
00e4 00e4 d cd5501
00e4 00e4 s 		CALL TxValueOfHL
00e7 00e7 s 
00e7 00e7 d c1
00e7 00e7 s 		POP B
00e8 00e8 d d1
00e8 00e8 s 		POP D
00e9 00e9 d e1
00e9 00e9 s 		POP H
00ea 00ea d f1
00ea 00ea s ProcessByte:	POP PSW
00eb 00eb d fb
00eb 00eb s 		EI
00ec 00ec d c9
00ec 00ec s 		RET
00ed 00ed s ;-------------------------------------------
00ed 00ed d 210000
00ed 00ed s Boot:		LXI H, 0000H
00f0 00f0 d 2b
00f0 00f0 s 		DCX H
00f1 00f1 d f9
00f1 00f1 s 		SPHL
00f2 00f2 d 21c301
00f2 00f2 s 		LXI H, TextGreet1
00f5 00f5 d cd3a01
00f5 00f5 s 		CALL TxStringAtHL
00f8 00f8 d cd8001
00f8 00f8 s 		CALL GetLowestRam
00fb 00fb d 7d
00fb 00fb s 		MOV A, L
00fc 00fc d d300
00fc 00fc s 		OUT PORT_0
00fe 00fe d 7c
00fe 00fe s 		MOV A, H
00ff 00ff d d301
00ff 00ff s 		OUT PORT_1		;display on LEDs
0101 0101 d cd5501
0101 0101 s 		CALL TxValueOfHL	;display on console
0104 0104 d 21e901
0104 0104 s 		LXI H, TextPort
0107 0107 d cd3a01
0107 0107 s 		CALL TxStringAtHL
010a 010a d db00
010a 010a s 		IN PORT_0
010c 010c d 6f
010c 010c s 		MOV L, A
010d 010d d db01
010d 010d s 		IN PORT_1
010f 010f d 67
010f 010f s 		MOV H, A
0110 0110 d cd5501
0110 0110 s 		CALL TxValueOfHL
0113 0113 d 21f801
0113 0113 s 		LXI H, TextGreet2
0116 0116 d cd3a01
0116 0116 s 		CALL TxStringAtHL
0119 0119 d cd2001
0119 0119 s 		CALL PrintAsciiSet
011c 011c d fb
011c 011c s 		EI
011d 011d s ;		HLT			;interrupt is needed to go further
011d 011d s ;-------------------------------------------------------------------------
011d 011d d c30004
011d 011d s 		JMP AltMon		;enter monitor program
0120 0120 s ;-------------------------------------------------------------------------
0120 0120 d 01200d
0120 0120 s PrintAsciiSet: 	LXI B, 0D20H		;set C to ASCII space
0123 0123 d 79
0123 0123 s SendNextChar: 	MOV A, C
0124 0124 d cd7401
0124 0124 s 		CALL SendChar		;send char
0127 0127 d fe7e
0127 0127 s 		CPI "~"			;end of printable chars reached?
0129 0129 d ca3001
0129 0129 s 		JZ NextLine
012c 012c d 0c
012c 012c s 		INR C
012d 012d d c32301
012d 012d s 		JMP SendNextChar
0130 0130 d 78
0130 0130 s NextLine:	MOV A, B
0131 0131 d cd7401
0131 0131 s 		CALL SendChar		;send char
0134 0134 d ee06
0134 0134 s 		XRI 00000110B		;cheap trick to convert newline to linefeed 
0136 0136 d cd7401
0136 0136 s 		CALL SendChar		;send char
0139 0139 d c9
0139 0139 s 		RET
013a 013a s 
013a 013a d 7e
013a 013a s TxStringAtHL:	MOV A, M
013b 013b d a7
013b 013b s 		ANA A
013c 013c d c8
013c 013c s 		RZ
013d 013d d cd7401
013d 013d s 		CALL SendChar
0140 0140 d 23
0140 0140 s 		INX H
0141 0141 d f23a01
0141 0141 s 		JP TxStringAtHL
0144 0144 s 
0144 0144 d 0e10
0144 0144 s BytesAtHL:	MVI C, 0x10		;dump 16 bytes at (HL)
0146 0146 d 3e20
0146 0146 s NextByteAtHL:	MVI A, " "
0148 0148 d cd7401
0148 0148 s 		CALL SendChar
014b 014b d 7e
014b 014b s 		MOV A, M
014c 014c d cd5a01
014c 014c s 		CALL TxValueOfA
014f 014f d 0d
014f 014f s 		DCR C
0150 0150 d c8
0150 0150 s 		RZ			;return if reached 0
0151 0151 d 23
0151 0151 s 		INX H
0152 0152 d c34601
0152 0152 s 		JMP NextByteAtHL
0155 0155 s 
0155 0155 d 7c
0155 0155 s TxValueOfHL:	MOV A, H
0156 0156 d cd5a01
0156 0156 s 		CALL TxValueOfA
0159 0159 d 7d
0159 0159 s 		MOV A, L
015a 015a d f5
015a 015a s TxValueOfA:	PUSH PSW
015b 015b d 0f
015b 015b s 		RRC
015c 015c d 0f
015c 015c s 		RRC
015d 015d d 0f
015d 015d s 		RRC
015e 015e d 0f
015e 015e s 		RRC
015f 015f d e60f
015f 015f s 		ANI 0x0F
0161 0161 d cd6701
0161 0161 s 		CALL TxHexDig
0164 0164 d f1
0164 0164 s 		POP PSW
0165 0165 d e60f
0165 0165 s 		ANI 0x0F
0167 0167 d c630
0167 0167 s TxHexDig:	ADI '0'
0169 0169 d fe3a
0169 0169 s 		CPI '9' + 1
016b 016b d fa7001
016b 016b s 		JM TxHexDigOut
016e 016e d c607
016e 016e s 		ADI 0x07
0170 0170 d cd7401
0170 0170 s TxHexDigOut:	CALL SendChar
0173 0173 d c9
0173 0173 s 		RET
0174 0174 s 	
0174 0174 d f5
0174 0174 s SendChar:	PUSH PSW
0175 0175 d db10
0175 0175 s CheckIfReady:	IN ACIA0_STATUS
0177 0177 d e602
0177 0177 s 		ANI MASK_READY
0179 0179 d ca7501
0179 0179 s 		JZ CheckIfReady
017c 017c d f1
017c 017c s 		POP PSW
017d 017d d d311
017d 017d s 		OUT ACIA0_DATA
017f 017f d c9
017f 017f s 		RET
0180 0180 s 		
0180 0180 d 21ffff
0180 0180 s GetLowestRam:	LXI H, 0xFFFF	;assume RAM is located near top of address space
0183 0183 d 7e
0183 0183 s NextAddress:	MOV A, M
0184 0184 d be
0184 0184 s 		CMP M
0185 0185 d c29701
0185 0185 s 		JNZ LowestFound
0188 0188 d 2f
0188 0188 s 		CMA		;flip all bits
0189 0189 d 77
0189 0189 s 		MOV M, A
018a 018a d be
018a 018a s 		CMP M
018b 018b d c29701
018b 018b s 		JNZ LowestFound
018e 018e d 2f
018e 018e s 		CMA
018f 018f d 77
018f 018f s 		MOV M, A
0190 0190 d 7c
0190 0190 s 		MOV A, H
0191 0191 d b5
0191 0191 s 		ORA L
0192 0192 d c8
0192 0192 s 		RZ		;Bail if HL = 0
0193 0193 d 2b
0193 0193 s 		DCX H
0194 0194 d c38301
0194 0194 s 		JMP NextAddress
0197 0197 d 23
0197 0197 s LowestFound:	INX H
0198 0198 d c9
0198 0198 s 		RET
0199 0199 s 		
0199 0199 s 		
0199 0199 d 0d4146203d2000
0199 0199 s TextAF:		DB CR, "AF = ", 0x00
01a0 01a0 d 0d4243203d2000
01a0 01a0 s TextBC:		DB CR, "BC = ", 0x00
01a7 01a7 d 0d4445203d2000
01a7 01a7 s TextDE:		DB CR, "DE = ", 0x00
01ae 01ae d 0d484c203d2000
01ae 01ae s TextHL:		DB CR, "HL = ", 0x00
01b5 01b5 d 0d5043203d2000
01b5 01b5 s TextPC:		DB CR, "PC = ", 0x00
01bc 01bc d 0d5350203d2000
01bc 01bc s TextSP:		DB CR, "SP = ", 0x00
01c3 01c3 d 0d0d2a2a20537973393038302069732072656164792e2052414d207374617274732061742000
01c3 01c3 s TextGreet1:	DB CR, CR, "** Sys9080 is ready. RAM starts at ", 0x00
01e9 01e9 d 20496e70757420706f7274203d2000
01e9 01e9 s TextPort	DB " Input port = ", 0x00
01f8 01f8 d 202a2a0d20202850726573732042544e3020746f2073686f772070726f636573736f722073746174652c206f722042544e3120666f72204143494173290d00
01f8 01f8 s TextGreet2:	DB " **", CR, "  (Press BTN0 to show processor state, or BTN1 for ACIAs)", CR, 0x00 
0237 0237 d 0d41434941302052782073746174757320616e642064617461203d2000
0237 0237 s TextACIA0:	DB CR, "ACIA0 Rx status and data = ", 0x00
0254 0254 d 0d41434941312052782073746174757320616e642064617461203d2000
0254 0254 s TextACIA1:	DB CR, "ACIA1 Rx status and data = ", 0x00
0271 0271 d 00
0271 0271 s End:		DB 0x00		;Cheap trick to see last used address
000a v lf
000d v cr
0271 a end
00ed a boot
0000 v port_0
0001 v port_1
01a0 a textbc
0400 v altmon
0199 a textaf
01a7 a textde
01b5 a textpc
01ae a texthl
01bc a textsp
ff00 v temp_pc
0174 a sendchar
0167 a txhexdig
0130 a nextline
00b0 a notfound
0237 a textacia0
0254 a textacia1
01e9 a textport
0011 v acia0_data
0013 v acia1_data
0144 a bytesathl
0039 a dumpstate
01c3 a textgreet1
01f8 a textgreet2
0001 v mask_valid
0002 v mask_ready
0040 v mask_error
015a a txvalueofa
0097 a searchforpc
0080 v mask_intreq
0183 a nextaddress
0155 a txvalueofhl
00ea a processbyte
00b4 a restoreregs
0197 a lowestfound
0170 a txhexdigout
0010 v acia0_status
0012 v acia1_status
0002 v mask_button1
0175 a checkifready
0123 a sendnextchar
0146 a nextbyteathl
0180 a getlowestram
013a a txstringathl
0120 a printasciiset
00ba a onbytereceived
